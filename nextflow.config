/*
 * -------------------------------------------------
 *  nf-core/bcellmagic Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
    
  // Subworflow selection
  subworkflow = 'bcellmagic'
  
  //---- Common parameters ----
  // Input parameters
  input = false
  custom_container = false

  // Databases options
  igblast_base = false
  imgtdb_base = false
  species = 'human'
  loci = 'ig'
  save_databases = false

  //---- bcellmagic spcecific ----
  index_file = false
  cprimers = false
  vprimers = false

  // protocol options
  protocol = 'pcr_umi'
  race_linker = false

  // UMI and primer handling
  umi_position = 'R1'
  umi_length = 0
  umi_start = 0
  vprimer_start = 0
  cprimer_start = 0
  cprimer_position = 'R1'
  primer_maxerror = 0.2
  primer_mask_mode = 'cut'
  primer_consensus = 0.6

  // PRESTO options
  filterseq_q = 20

  // Clustering parameters
  set_cluster_threshold = false
  cluster_threshold = 0.14
  threshold_method = 'density'

  // Downstream analysis
  skip_report = false
  skip_lineage = false

  //---- reveal specific ----
  collapseby = 'filename'
  cloneby = 'subject_id'
  outdir = './results'
  reassign = false
  productive_only = true
  remove_chimeric = false
  threshold = 'auto'
  miairr="$projectDir/assets/reveal/mapping_MiAIRR_BioSample_v1.3.1.tsv"
  //immcantation_container='immcantation/airrflow:dev'
  immcantation_pipelines ='/usr/local/bin/'


  // Options: Custom config
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // References
  igenomes_base = 's3://ngi-igenomes/igenomes'
  igenomes_ignore = true

  // MultiQC options
  multiqc_config = false
  multiqc_title = ''
  max_multiqc_email_size = 25.MB
  skip_multiqc = false

  // Boilerplate options
  email = false
  email_on_fail = false
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
  publish_dir_mode = 'copy'
  plaintext_email = false
  monochrome_logs = false
  help = false
  enable_conda = false
  singularity_pull_docker_container = false
  schema_ignore_params = 'config_profile_name,modules'

  // Config options
  tracedir = "${params.outdir}/pipeline_info"
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_name = null
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  validate_params = true
  show_hidden_params = false

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
// process.container = 'nfcore/bcellmagic:2.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda {
    docker.enabled = false
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    process.conda = "$projectDir/environment.yml"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    docker.userEmulation = true
  }
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    singularity.autoMounts = true
  }
  podman {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = true
    shifter.enabled = false
    charliecloud.enabled = false
  }
  shifter {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = true
    charliecloud.enabled = false
  }
  charliecloud {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = true
  }
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
  test_tcr { includeConfig 'conf/test_tcr.config' }
  test_reveal { includeConfig 'conf/test_reveal.config' }
  test_reveal_no_cc { includeConfig 'conf/test_reveal_no_cc.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'nf-core/bcellmagic'
  author = 'Gisela Gabernet, Simon Heumos, Alexander Peltzer'
  homePage = 'https://github.com/nf-core/bcellmagic'
  description = 'B and T cell repertoire analysis pipeline with the Immcantation framework.'
  mainScript = 'main.nf'
  nextflowVersion = '>=21.04.1'
  version = '2.0.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
